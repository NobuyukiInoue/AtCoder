package main

import (
	"fmt"
	"os"
	"sort"
)

func printNums(title string, nums []int) {
	for i := 0; i < len(nums); i++ {
		fmt.Printf("%s[%d] = %d\n", title, i, nums[i])
	}
	fmt.Println()
}

func myMax(a int, b int) int {
	if a >= b {
		return a
	}
	return b
}

func main() {
	var n, k int

	/*
		fmt.Scan(&n)
		fmt.Scan(&k)

		nums := make([]int, n)
		PositiveCounts := 0
		for i := 0; i < n; i++ {
			fmt.Scan(&nums[i])
			if nums[i] >= 0 {
				PositiveCounts++
			}
		}
	*/
	n, k = 10, 40
	data := []int{5, 4, 3, 2, -1, 0, 0, 0, 0, 0}

	nums := make([]int, n)
	PositiveCounts := 0
	for i := 0; i < n; i++ {
		nums[i] = data[i]
		if nums[i] >= 0 {
			PositiveCounts++
		}
	}

	fmt.Printf("n = %d, k = %d\n", n, k)
	fmt.Printf("PositiveCounts = %d\n", PositiveCounts)

	numsPositive := make([]int, PositiveCounts)
	numsNegative := make([]int, n-PositiveCounts)

	o, p := 0, 0
	for i := 0; i < n; i++ {
		if nums[i] < 0 {
			numsNegative[o] = nums[i]
			o++
		} else {
			numsPositive[p] = nums[i]
			p++
		}
	}

	printNums("numsNegative", numsNegative)
	printNums("numsPositive", numsPositive)

	sort.Sort(sort.IntSlice(numsNegative))
	sort.Sort(sort.IntSlice(numsPositive))

	printNums("numsNegative", numsNegative)
	printNums("numsPositive", numsPositive)

	numsNegativeLength := len(numsNegative)
	numsPositiveLength := len(numsPositive)
	count := 0

	for i := 0; i < numsNegativeLength; i++ {
		for j := numsPositiveLength - 1; j >= 0; j-- {
			count++
			if count == k {
				fmt.Printf("%d\n", numsNegative[i]*numsPositive[j])
				os.Exit(1)
			}
		}
	}
	for m, n := 0, 0; m < numsNegativeLength || n < numsPositiveLength; {
		for o, p := numsNegativeLength-1, numsPositiveLength-1; o >= 0 || p >= 0; {
			if m >= numsNegativeLength {
				mulPositive := numsPositive[n] * numsPositive[p]
				count++
				if mulPositive == k {
					fmt.Printf("%d\n", mulPositive)
					os.Exit(1)
				}
				n++
				p--
				continue
			}

			if n >= numsNegativeLength {
				mulNegative := numsNegative[m] * numsNegative[o]
				count++
				if mulNegative == k {
					fmt.Printf("%d\n", mulNegative)
					os.Exit(1)
				}
				m++
				o--
				continue
			}

			mulNegative := numsNegative[m] * numsNegative[o]
			mulPositive := numsPositive[n] * numsPositive[p]

			if mulNegative <= mulPositive {
				count++
				if mulNegative == k {
					fmt.Printf("%d\n", mulNegative)
					os.Exit(1)
				}
				m++
				o--
			} else {
				count++
				if mulPositive == k {
					fmt.Printf("%d\n", mulPositive)
					os.Exit(1)
				}
				n++
				p--
			}
		}
	}

	fmt.Printf("k not found...\n")
}
